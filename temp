
def verificar_planos_trabalho():
    # Obter a lista de servidores do banco SQL Portalina
    servidores = pontalina("SELECT * FROM [ProgramaGestao].[VW_PlanoTrabalhoAUDIN]")

    # Obter a lista de férias do banco SQL Auditor
    ferias = auditoria("SELECT * FROM Ferias")

    # Verificar se a variável ferias é None
    if ferias is None:
        print("Erro: a função auditoria('SELECT * FROM Ferias') retornou None")
        return

    # Verificar se a variável ferias é iterável
    if not isinstance(ferias, (list, tuple)):
        print(f"Erro: a função auditoria('SELECT * FROM Ferias') retornou um valor não iterável: {ferias}")
        return

    # Verificar se o arquivo notificado.json existe
    try:
        with open('data/notificado.json', 'r') as f:
            notificados = json.load(f)
    except FileNotFoundError:
        notificados = {}

    # Para cada servidor na lista de servidores
    for servidor in servidores:
        # Verificar se a variável ferias é None

        # Obter a data atual
        hoje = datetime.now().date()

        # Criar uma lista vazia para armazenar os nomes dos servidores em férias
        servidores_em_ferias = []

        # Iterar sobre a lista de férias
        for ferias_servidor in ferias:
            # Obter o nome do servidor
            nome_servidor = ferias_servidor[0]
            
            # Iterar sobre os períodos de férias do servidor
            for i in range(1, len(ferias_servidor), 2):
                # Obter a data de início e a duração do período de férias
                data_inicio_str = ferias_servidor[i]
                duracao_str = ferias_servidor[i+1]
                
                # Verificar se data_inicio_str e duracao_str não estão vazios
                if data_inicio_str and duracao_str:
                    # Converter data_inicio_str para um objeto datetime
                    data_inicio = datetime.strptime(data_inicio_str, '%d/%m/%Y').date()
                    
                    # Converter duracao_str para um inteiro
                    duracao = int(duracao_str)
                    
                    # Calcular a data de término do período de férias
                    data_termino = data_inicio + timedelta(days=duracao)
                    
                    # Verificar se hoje está dentro do período de férias
                    if data_inicio <= hoje <= data_termino:
                        # Adicionar o nome do servidor à lista servidores_em_ferias
                        servidores_em_ferias.append(nome_servidor)
                        break

        if servidores_em_ferias is not None:
            # Verificar se o servidor está na lista de férias
            if any(servidor['NomeServidor'] == ferias_servidor['SERVIDOR/COLABORADOR'] for ferias_servidor in servidores_em_ferias):
                continue

            # Verificar o status SituacaoPactoTrabalho do servidor
            if servidor['SituacaoPactoTrabalho'] != 'Em execução':
                # Verificar se o servidor já foi notificado anteriormente
                if servidor['NomeServidor'] not in notificados:
                    # Enviar o primeiro aviso ao servidor
                    print('Enviando notificação para servidor ' + servidor['NomeServidor'])
                    valores = {'nome': servidor['NomeServidor']}
                    html_personalizado = personalizar_html('C:/Users/navinchandry.ruas/Documents/.git/Regras/mail/avisoNCob1.html', valores)
                    html_corrigido = corrigir_codificacao(html_personalizado)

                    enviar_notificacao(servidor['NomeServidor'], html_corrigido)
                    # Registrar no arquivo notificado.json que o servidor foi notificado uma vez
                    notificados[servidor['NomeServidor']] = 1
                elif notificados[servidor['NomeServidor']] == 1:
                    # Enviar o segundo aviso ao servidor e ao supervisor
                    print('Enviando segunda notificação para servidor ' + servidor['NomeServidor'])
                    valores = {'nome': servidor['NomeServidor']}
                    html_personalizado = personalizar_html('C:/Users/navinchandry.ruas/Documents/.git/Regras/mail/avisoNCob1.html', valores)
                    html_corrigido = corrigir_codificacao(html_personalizado)
                    enviar_notificacao(servidor['NomeServidor'], html_corrigido)
                    print('Enviando notificação para supervisor')
                    valores = {'nome': servidor['NomeServidor']}
                    html_personalizado = personalizar_html('C:/Users/navinchandry.ruas/Documents/.git/Regras/mail/avisoNCob1.html', valores)
                    html_corrigido = corrigir_codificacao(html_personalizado)
                    enviar_notificacao_supervisor(servidor['NomeServidor'], html_corrigido)
                    # Registrar no arquivo notificado.json que o servidor foi notificado duas vezes
                    notificados[servidor['NomeServidor']] = 2
                elif notificados[servidor['NomeServidor']] == 2:
                    # O servidor já foi notificado duas vezes, não enviar mais notificações
                    continue    

    # Salvar o arquivo notificado.json
    with open('notificado.json', 'w') as f:
        json.dump(notificados, f)
