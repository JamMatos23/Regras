---
title: Diretrizes para o Lançamento de Planos de Projetos
authors: 
  - Navin Ruas 
  - Jamil Matos
date: 02/05/2023
lang: pt-BR
output:
  powerpoint_presentation:
    reference_doc: template.pptx
  pdf_document:
    toc: true
    toc_depth: 2
    number_sections: true
---

# Maximizando a Colaboração e Produtividade: Integração do SharePoint e SiSGP

## Diretrizes para o Lançamento de Planos de Projetos

- Verificações Diárias.

### Verificação de Plano de Trabalho de Servidor

#### Objetivo

O objetivo deste script é verificar se os servidores possuem um plano de trabalho válido e enviar notificações caso não possuam.

#### Condições para um plano de trabalho não coberto

Um plano de trabalho é considerado não coberto se a coluna `SituacaoPactoTrabalho` do servidor no banco de dados Portalina for diferente de `‘Em execução’`.

#### Ações a serem tomadas

- Caso o servidor não tenha um plano de trabalho válido, enviar um aviso ao servidor.

- Se na próxima vez que o script rodar o servidor ainda não tiver um plano de trabalho válido, enviar um segundo aviso ao servidor e ao supervisor.

#### Passos

1. Obter a lista de servidores do banco SQL Portalina usando a função `pontalina("SELECT [NomeServidor], [SituacaoPactoTrabalho], [pactoTrabalhoId], [DtInicioPactoTrab], [DtFimPactoTrab], [SituaçãoAtividade] FROM [ProgramaGestao].[VW_PlanoTrabalhoAUDIN] WHERE DtFimPactoTrab IN (SELECT MAX(DtFimPactoTrab) FROM [ProgramaGestao].[VW_PlanoTrabalhoAUDIN] GROUP BY NomeServidor) order by NomeServidor")` do arquivo `Conexao.py`.
2. Obter a lista de férias do banco SQL Auditor usando a função `auditoria("SELECT * FROM Ferias")` do arquivo `Conexao.py`.
3. Para cada SituaçãoPactoTrabalho de cada servidor:
  1. Se `SituacaoPactoTrabalho` for igual a `‘Em execução’ || ‘Enviado para aceite’`, ignorar e passar para o próximo servidor.
  2. Se `SituacaoPactoTrabalho` for diferente de `‘Em execução’ || ‘Enviado para aceite’`:
    1. Verificar se o servidor está na lista de férias. Se estiver, ignorar e passar para o próximo servidor.
    2. Verificar se o servidor já foi notificado anteriormente (verificando em um arquivo `notificado`.json). 
    3. Se o servidor não foi notificado anteriormente, enviar o primeiro aviso ao servidor usando a função `enviar_notificacao(servidor, mensagem)` do arquivo `emailFunc.py` e registrar no arquivo notificado.json que o servidor foi notificado uma vez. 
    4. Se o servidor já foi notificado uma vez e o servidor não tiver atualizado a `SituacaoPactoTrabalho`, na segunda vez que o script rodar, enviar o segundo aviso ao servidor e ao supervisor usando as funções `enviar_notificacao(servidor, mensagem)` e `enviar_notificacao_supervisor(servidor, mensagem)` do arquivo `emailFunc.py` e registrar no arquivo `notificado.json` que o servidor foi notificado duas vezes.

#### Observações

- As conexões com os bancos de dados Portalina e Auditor devem ser implementadas em um arquivo local chamado `Conexao.py`, que possui as funções `pontalina(query)` e `auditoria(query)`.
- As mensagens de e-mail a serem enviadas devem ser personalizadas usando a função `personalizar_html(html, valores[])`.
- As funções para enviar as notificações por email devem ser implementadas em um arquivo externo chamado `emailFunc.py`.
- As mensagens de notificação estarão também em arquivos externos `avisoNCob1.html` e `avisoNCob2.html`.

### Validar Conclusão do Plano de Trabalho

#### Objetivo

Verificar se os servidores concluíram todas as atividades do plano de trabalho dentro do prazo e enviar notificações caso não tenham.

#### Ações a serem tomadas

- Caso o plano de trabalho não esteja com todas as atividades concluídas até o prazo, enviar um aviso ao servidor.

#### Passos

1. Obter dados do SQL usando a consulta `pontalina('SELECT * FROM [ProgramaGestao].[VW_PlanoTrabalhoAUDIN]')`.
2. Caso DfFimPactoTrab seja o dia atual ou ja tenha vencido:
  1. Para cada servidor:
    1. Se todas as atividades 'SituaçãoAtividade' com o mesmo pactoTrabalhoId estiverem como Concluída, ignorar e passar para o próximo servidor.
    2. Se a data DtFimPactoTrab for o dia atual, enviar uma notificação ao servidor usando o arquivo HTML `avisoConc1.html`.
    3. Se a data DtFimPactoTrab já estiver vencida, enviar uma notificação ao servidor e ao supervisor usando o arquivo HTML `avisoNConc.html`.
      1. Adicionar o servidor à lista de servidores não concluídos em um arquivo `nConc.json`.
      2. Verificar se os servidores na lista já concluíram as atividades. Caso tenham concluído, remover da lista.

#### Observações

- As conexões com o banco de dados SQL devem ser implementadas em um arquivo local chamado `Conexao.py`, que possui uma função para executar consultas SQL.
- As funções para enviar as notificações por email devem ser implementadas em um arquivo externo chamado `emailFunc.py`.
- As mensagens de notificação estarão também em arquivos externos `avisoConc1.html` e `avisoNConc.html`.


### Verificar Campo Descrição
- Caso trabalho 'Enviado para Aceite'.
- Verificar se Descrição está correta.
- Verificar se Descrição coincide com atividade.
- Caso haja algum erro, apontar o(s) erro(s) ao servidor. Para servidor e Supervisor.
- Caso tudo correto, enviar para supervisor para Análise.

#### Objetivo
Verificar se o campo Descrição está correto e coincide com a atividade quando o trabalho está ‘Enviado para Aceite’. Caso haja algum erro, apontar o(s) erro(s) ao servidor e ao supervisor.

#### Passos

1. Obter a lista de trabalhos com status ‘Enviado para Aceite’ do banco de dados usando uma consulta SQL.
2. Para cada trabalho na lista:
  1. Verificar se o campo Descrição está correto e coincide com a atividade.
  2. Se houver algum erro, enviar uma notificação ao servidor e ao supervisor apontando o(s) erro(s) usando a função do arquivo Email.py com mensagem descErro.html.
  3. Se tudo estiver correto, enviar o trabalho para o supervisor para análise com a mensagem descAceita.html.

#### Observações
As conexões com o banco de dados devem ser implementadas em um arquivo local chamado Conexao.py, que possui uma função para executar consultas SQL.
As funções para enviar as notificações por email devem ser implementadas em um arquivo externo chamado Email.py.

### Verificar existencia do produto no eAud
- Atividade Avaliação ou Consultoria.
- Se não houver arquivo na id do eAud.
- No dia seguinte avisar supervisor e servidor novamente.
- Se concluído atividades e produtos avisar supervisor.

#### Objetivo
Verificar se o id registrado existe dentro do eAud e se sim verificar se há a existência de um arquivo em anexo

#### Ações a serem tomadas
1. Realizar uma query que retorne somente os valores nos quais os valores da coluna Atividade sejam iguais a Avaliação ou Consultoria com base na dada atual.
2. Se não houver correspondetes enviar um email para o servidor falando para que o faça no mesmo dia.
3. Executar novamente essa query no dia seguinte e se o servidor não tiver feito remandar um email para ele e dessa vez tambem mandar para o supervisor.

#### Passos


### Atualizar Gerador de Descrição

#### Objetivo
Realizar melhorias para otimizar a execução do site.

#### Ações a serem tomadas
1. Utilizar do JavaScript para fazer a conexão as bases de dados presentes tanto no MySQL Workbench e SQL Server Management Studio

#### Passos

### Atualização do Dashboard Gerencial SharePoint - 'Em Execução' ou 'Autorizado' enviar dados para SharePoint.

#### Objetivo
Criar um filtro no Dashboard que permitar selecionar no campo SituacaoPactoTrabalho os dados onde são ou "Em Execução" ou "Autorizado" 

#### Ações a serem tomadas
Utilizar do PowerBI para fazer um novo filtro no Dashboard Gerencial SharePoint onde se possar escolher os valores que desejar mostrar por meio do campo SituacaoPactoTrabalho

#### Passos